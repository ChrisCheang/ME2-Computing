import math
import numpy as np
import matplotlib.pyplot as plt
import sympy as smp
from sympy import *

y = symbols("y", real=True)
t = symbols("t", real=True)


# Task A: Explicit methods: Forward Euler and RK4


def FwEuler(f, t0, y0, h, t_end, time_nodes_output=False):
    f = smp.sympify(f)
    t_array, y_array = np.array([t0]), np.array([y0])
    tn, yn = t0, y0
    while tn < t_end:
        yn += h * f.subs({t: t_array[-1], y: y_array[-1]}).evalf()
        tn += h
        t_array = np.append(t_array, [tn])
        y_array = np.append(y_array, [yn])
    if not time_nodes_output:
        return y_array
    else:
        return t_array


def ODERK4(f, t0, y0, h, t_end, time_nodes_output=False):
    f = smp.sympify(f)
    t_array, y_array = np.array([t0]), np.array([y0])
    tn, yn = t0, y0
    while tn < t_end:
        k1 = h * f.subs({t: t_array[-1], y: y_array[-1]}).evalf()
        k2 = h * f.subs({t: t_array[-1] + 0.5 * h, y: y_array[-1] + 0.5 * k1}).evalf()
        k3 = h * f.subs({t: t_array[-1] + 0.5 * h, y: y_array[-1] + 0.5 * k2}).evalf()
        k4 = h * f.subs({t: t_array[-1] + h, y: y_array[-1] + k3})
        yn += (k1 + 2*k2 + 2*k3 + k4)/6
        tn += h
        t_array = np.append(t_array, [tn])
        y_array = np.append(y_array, [yn])
    if not time_nodes_output:
        return y_array
    else:
        return t_array


test_ode = -2*y*t - 2*t**3

xeuler = FwEuler(test_ode, 0, -3, 0.1, 2, time_nodes_output=True)
yeuler = FwEuler(test_ode, 0, -3, 0.1, 2, time_nodes_output=False)

xrk4 = ODERK4(test_ode, 0, -3, 0.1, 2, time_nodes_output=True)
yrk4 = ODERK4(test_ode, 0, -3, 0.1, 2, time_nodes_output=False)


xactual = np.arange(0,2.01,0.01)
yactual = []
for i in range(len(xactual)):
    yactual.append(1 - xactual[i]**2 - 4*math.e**(-xactual[i]**2))

'''
plt.plot(xeuler, yeuler, color='b')
plt.plot(xrk4, yrk4, color='r')
plt.plot(xactual, yactual, color='black')
plt.show()
'''


# Task B: Implicit methods: Backward Euler

